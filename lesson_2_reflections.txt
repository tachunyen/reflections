What happens when you initialize a repository? Why do you need to do it?

It tells git to be ready to start tracking the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is a space you can use to place files for the same commit.
This can help keep things organized.

How can you use the staging area to make sure you have one commit per logical change?

If I am working on a project with related files, I could make a change in
file1, add file1 to the staging area, then work on file2. I can imagine while
working on file2, I might come across areas I would like to change in file1. By
using the staging area, I can make sure commits are only made for significant
changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be very helpful for experimental features that I might not
want to add to the master branch until it is mature.

How do the diagrams help you visualize the branch structure?

Diagrams always makes it easier to visualize.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When two branches are merged together, changes are folded into the existing
branch. The diagram illustrates how commits to the two branches can still be
accessed.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

pros: faster

cons: Git might make the wrong merging decision and you could end up with
strange behaviors or code that does not compile.

Commands:

git add     |     Add a file to the staging area
git commit  |     Commit the files from the staging area to the repository
git status  |     Show which files are in the staging area, and which files from
                  the working directory are not part of the repository
git diff    |     Git diff without arguments is comparing the working directory
                  with the staging area
git diff --staged  |  Compare the staging area with the repository
git reset --hard  |   Undo all changes! There is no rollback for this, so be
                      carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will
                          be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation
                                                    of the commit history within
                                                    different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on
                                      this branch in one call instead of git
                                      branch new_branch_name and git checkout
                                      new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into
                                branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the
                        previous version. This is working even after merging.
